#!/usr/bin/env python3

# Program to render the Intel Series II/III MDS character generator ROM
# character set into a PDF file

# Copyright 2016 Eric Smith <spacewar@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License
# as published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import cairocffi as cairo

class View:
    def __init__(self, data):
        self.data = [data[i:i+8] for i in range(0, 128*8, 8)]

    def render_pdf(self, pdffile, width = 11 * 25.4, height = 8.5 * 25.4, border = 0.5 * 25.4):
        points_per_inch = 72.0
        points_per_mm = points_per_inch / 25.4
        surface = cairo.PDFSurface(pdffile, width * points_per_mm, height * points_per_mm)
        context = cairo.Context(surface)
        context.scale(points_per_mm, points_per_mm)

        cell_width  = (width  - 2 * border) / 16.0
        cell_height = (height - 2 * border) / 8.0
        
        left = (width/2)  - 8*cell_width
        top  = (height/2) - 4*cell_height

        for i in range(128):
            self.render_char(context,
                             i,
                             left + i%16 * cell_width,
                             top + i//16 * cell_height,
                             cell_width,
                             cell_height,
                             self.data[i])

    def render_char(self, context, code,
                    left, top,
                    cell_width, cell_height,
                    data):
        context.set_line_width(0.125)
        context.set_source_rgb(0.0, 0.0, 0.0)
        context.move_to(left, top)
        context.line_to(left + cell_width, top)
        context.line_to(left + cell_width, top + cell_height)
        context.line_to(left, top + cell_height)
        context.line_to(left, top)
        context.stroke()

        for v in range(8):
            pixel_top = top + (v+1) * cell_height/10
            pixel_bottom = pixel_top + cell_height/10
            byte = data[v]
            delay_left = not ((byte >> 1) & 1)
            delay_right = not (byte & 1)
            for h in range(6):
                pixel_left = left + (h+1) * cell_width/8
                if (h <= 2) and delay_left:
                    pixel_left += cell_width/16
                if (h >= 3) and delay_right:
                    pixel_left += cell_width/16
                pixel_right = pixel_left + cell_width/8
                bit = (byte >> (7-h)) & 1
                if bit:
                    context.move_to(pixel_left,  pixel_top)
                    context.line_to(pixel_right, pixel_top)
                    context.line_to(pixel_right, pixel_bottom)
                    context.line_to(pixel_left,  pixel_bottom)
                    context.line_to(pixel_left,  pixel_top)
                    context.fill()

# example usage:
# python3 view chargen.bin -p chargen.pdf 

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Disassembler for Intel 8089 I/O processor')

    parser.add_argument('-p', '--pdf',
                        type = argparse.FileType('wb'),
                        help = 'generate PDF file')

    parser.add_argument('--a4',
                        action = 'store_true',
                        help = 'format for A4 paper')

    parser.add_argument('input', type = argparse.FileType('rb'),
                        help = 'input character generator binary file')

    args = parser.parse_args()

    if args.a4:
        width = 297
        height = 210
    else:
        width = 11 * 25.4
        height = 8.5 * 25.4

    cg_data = args.input.read()
    args.input.close()
    if len(cg_data) != 1024:
        raise Exception('Character generator binary file length must be 1024')

    view = View(cg_data)

    if args.pdf:
        view.render_pdf(args.pdf, width = width, height = height)
